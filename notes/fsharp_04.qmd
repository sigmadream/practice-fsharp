---
title: 루프, 반복 및 함수형 대안
subtitle: Loops, Iteration, and Functional Alternatives
description: |
 F#에서는 `while` 및 `for` 루프와 같은 명령형 반복을 지원하지만, 함수형 프로그래밍에서는 재귀와 고차 함수(`map`, `filter`, `fold` 등)를 통한 반복을 선호합니다. 특히, 꼬리 재귀 최적화를 활용하면 전통적인 루프와 유사한 성능을 유지하면서도 함수형 패러다임을 유지할 수 있습니다. 함수형 반복 방식은 코드 가독성을 높이고 오류 가능성을 줄이며, 선언적이고 유지보수하기 쉬운 코드를 작성하는 데 기여합니다.
categories:
  - Loops
  - Iteration
  - Functional
execute:
  eval: false
---

### 1. F#의 루프 (While 및 For 루프) (Loops in F# (While and For Loops))

* F#은 `while` 루프와 `for` 루프와 같은 전통적인 명령형 반복 구문을 제공합니다.
* `while` 루프는 **조건이 참인 동안** 코드 블록을 반복적으로 실행합니다. 반복 횟수를 미리 알 수 없고 동적 조건에 따라 루프를 계속해야 하는 경우에 유용합니다.
* `for` 루프는 **값의 범위 또는 컬렉션**을 반복하고 각 값에 대해 루프 본문을 실행합니다. 반복 횟수가 미리 정의된 범위 또는 컬렉션을 반복하는 데 특히 유용합니다.
* `while` 및 `for` 루프는 직관적이지만 함수형 대안에 비해 표현력이 떨어지고 유지 관리가 어려울 수 있습니다.

```fsharp
// while 루프 (The while Loop)
let mutable counter = 1
while counter <= 5 do
    printfn "%d" counter
    counter <- counter + 1

// for 루프 (The for Loop)
// 범위 기반 for 루프 (Range-Based for Loop)
for i in 1 .. 5 do
    printfn "%d" i

// 컬렉션 기반 for 루프 (Collection-Based for Loop)
let fruits = ["Apple"; "Banana"; "Cherry"]
for fruit in fruits do
    printfn "%s" fruit

// 함수형 구문과 결합된 루프 (Combining Loops with Functional Constructs)
// 루프를 사용한 리스트 합계 계산 (Calculating the Sum of a List Using a Loop)
let numbers = [1; 2; 3; 4; 5]
let mutable sum = 0
let mutable index = 0
while index < List.length numbers do
    sum <- sum + List.item index numbers
    index <- index + 1
printfn "Sum (while loop): %d" sum

// 배열과 함께 for 루프 사용 (Using for Loop with Array)
let numbersArray = [|1; 2; 3; 4; 5|]
let mutable sum = 0
for i in numbersArray do
    sum <- sum + i
printfn "Sum (for loop): %d" sum
```

### 2. 함수형 대안으로서의 재귀적 반복 (Recursive Iteration as a Functional Alternative)

* F#의 함수형 프로그래밍은 종종 전통적인 루프보다 **재귀(recursion)** 를 선호합니다.
* 재귀는 **더 작은 하위 문제**를 해결하기 위해 **함수 자체를 호출**하는 것을 포함하며, 명시적 루프 구문을 피함으로써 코드를 단순화할 수 있습니다.
* 재귀 함수는 동일한 타입의 더 작은 하위 문제로 분해될 수 있는 문제에 자연스럽게 적용됩니다.
* **꼬리 재귀(tail recursion)** 는 재귀 호출이 함수의 마지막 연산인 특수한 재귀 형식입니다.
* 꼬리 재귀 함수는 F# 컴파일러에 의해 최적화되어 **호출 스택 증가를 방지**하고, 함수형 순수성을 유지하면서 반복 루프의 성능 특성을 모방할 수 있습니다.

```fsharp
// 재귀 이해 (Understanding Recursion)
// 재귀를 사용한 팩토리얼 계산 (Calculating the Factorial of a Number Using Recursion)
let rec factorial n =
    if n = 0 then
        1
    else
        n * factorial (n - 1)
printfn "Factorial of 5: %d" (factorial 5)

// 꼬리 재귀 (Tail Recursion)
let factorialTailRec n =
    let rec factorialHelper n acc =
        if n = 0 then
            acc
        else
            factorialHelper (n - 1) (n * acc)
    factorialHelper n 1
printfn "Tail-recursive factorial of 5: %d" (factorialTailRec 5)

// 반복을 위한 재귀 사용 (Using Recursion for Iteration)
// 재귀를 사용하여 리스트의 합계 계산 (Sum the Elements of a List Using Recursion)
let rec sumList lst =
    match lst with
    | [] -> 0
    | head :: tail -> head + sumList tail
printfn "Sum of list [1; 2; 3; 4; 5]: %d" (sumList [1; 2; 3; 4; 5])

// 루프에 대한 함수형 대안 (Functional Alternatives to Loops)
// fold를 사용하여 합계 계산 (Using fold for Summation)
let sumListFold lst =
    List.fold (fun acc x -> acc + x) 0 lst
printfn "Sum of list [1; 2; 3; 4; 5] using fold: %d" (sumListFold [1; 2; 3; 4; 5])
```

### 3. 꼬리 재귀 및 성능 (Tail Recursion and Performance)

* 꼬리 재귀는 F#에서 재귀 함수를 최적화하는 데 중요합니다.
* 함수가 재귀 호출을 마지막 동작으로 수행하면 컴파일러는 재귀를 **현재 스택 프레임을 재사용**하도록 최적화하여, 사실상 재귀를 루프와 유사한 성능으로 변환합니다.
* 이 최적화는 스택 오버플로우 문제를 방지하고 성능을 향상시키므로 꼬리 재귀는 깊거나 복잡한 재귀 연산에 선호되는 기술입니다.
* 고성능 F# 코드를 작성하려면 함수를 꼬리 재귀적으로 구성하는 방법을 이해하는 것이 중요합니다.
* 꼬리 재귀 함수는 루프만큼 효율적이지만 함수형 프로그래밍의 표현력을 유지합니다.
* 잘 설계된 꼬리 재귀 함수는 F# 프로그램의 가독성과 효율성에 기여합니다.

```fsharp
// 꼬리 재귀 이해 (Understanding Tail Recursion)
// 비 꼬리 재귀 팩토리얼 (Non-Tail-Recursive Factorial)
let rec factorialNonTailRec n =
    if n = 0 then
        1
    else
        n * factorialNonTailRec (n - 1)
printfn "Factorial of 5 (non-tail-recursive): %d" (factorialNonTailRec 5)

// 꼬리 재귀 팩토리얼 (Tail-Recursive Factorial)
let factorialTailRec n =
    let rec factorialHelper n acc =
        if n = 0 then
            acc
        else
            factorialHelper (n - 1) (n * acc)
    factorialHelper n 1
printfn "Factorial of 5 (tail-recursive): %d" (factorialTailRec 5)

// 꼬리 재귀가 불가능한 경우 (When Tail Recursion Is Not Possible)
// (예: 재귀 호출 후 추가 계산이 필요한 경우)

// 리스트 처리에 꼬리 재귀 사용 (Tail Recursion in List Processing)
// 비 꼬리 재귀 리스트 뒤집기 (Non-Tail-Recursive List Reversal)
let rec reverseList lst =
    match lst with
    | [] -> []
    | head :: tail -> reverseList tail @ [head]
printfn "Reversed list (non-tail-recursive): %A" (reverseList [1; 2; 3; 4; 5])

// 꼬리 재귀 리스트 뒤집기 (Tail-Recursive List Reversal)
let reverseListTailRec lst =
    let rec reverseHelper lst acc =
        match lst with
        | [] -> acc
        | head :: tail -> reverseHelper tail (head :: acc)
    reverseHelper lst []
printfn "Reversed list (tail-recursive): %A" (reverseListTailRec [1; 2; 3; 4; 5])

// 꼬리 재귀와 다른 함수형 구문 결합 (Combining Tail Recursion with Other Functional Constructs)
// 꼬리 재귀와 fold를 사용한 리스트 합계 (Summing a List Using Tail Recursion and fold)
let sumListTailRec lst =
    let rec sumHelper lst acc =
        match lst with
        | [] -> acc
        | head :: tail -> sumHelper tail (head + acc)
    sumHelper lst 0
printfn "Sum of list [1; 2; 3; 4; 5] (tail-recursive): %d" (sumListTailRec [1; 2; 3; 4; 5])
```

### 4. F#의 함수형 구문을 사용한 반복 (Iterating with Functional Constructs in F#)

* F#은 전통적인 루프에 대한 강력한 대안을 제공하는 여러 함수형 구문을 제공합니다.
* `map`, `filter`, `fold`와 같은 함수는 함수형 반복의 핵심입니다.
* **`map`** 함수는 컬렉션의 각 요소에 변환을 적용하여 결과로 새 컬렉션을 반환합니다.
* **`filter`** 함수는 지정된 조건을 충족하는 요소를 선택하여 원래 컬렉션의 하위 집합을 생성합니다.
* **`fold`** 함수는 컬렉션의 요소를 단일 값으로 집계하여 결합 함수를 모든 요소에 적용합니다.
* 이러한 함수형 구문은 **수행 방법(how)** 보다는 **수행 내용(what)** 에 중점을 둔 선언적 반복 접근 방식을 장려합니다.
* 선언적 접근 방식은 코드 가독성을 높이고, 오류 가능성을 줄이며, 유지 관리를 향상시킵니다.

```fsharp
// 반복을 위한 map 사용 (Using map for Iteration)
let numbers = [1; 2; 3; 4; 5]
let squares = List.map (fun x -> x * x) numbers
printfn "Squares of numbers: %A" squares

// filter로 요소 필터링 (Filtering Elements with filter)
let evens = List.filter (fun x -> x % 2 = 0) numbers
printfn "Even numbers: %A" evens

// fold로 데이터 접기 (Folding Data with fold)
let sum = List.fold (fun acc x -> acc + x) 0 numbers
printfn "Sum of numbers: %d" sum

// 함수형 구문 결합 (Combining Functional Constructs)
let squaredEvens =
    numbers
    |> List.filter (fun x -> x % 2 = 0)
    |> List.map (fun x -> x * x)
printfn "Squared even numbers: %A" squaredEvens

// 성능 고려 사항 (Performance Considerations)
// (예: 큰 데이터 세트나 무한 시퀀스 작업 시 지연 시퀀스 사용)
let squaredEvensLazy =
    numbers
    |> Seq.filter (fun x -> x % 2 = 0)
    |> Seq.map (fun x -> x * x)
    |> Seq.toList
printfn "Squared even numbers (lazy): %A" squaredEvensLazy
```