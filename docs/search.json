[
  {
    "objectID": "notes/fsharp05.html",
    "href": "notes/fsharp05.html",
    "title": "F# - 함수, 함수, 그리고 함수",
    "section": "",
    "text": "F#에서 함수는 let 키워드로 정의하며, 간단한 구문과 유형 추론을 통해 매개변수와 반환값을 명시하거나 추론할 수 있다. 함수가 1급 시민으로 취급되므로 다른 값처럼 변수에 할당하거나 인수로 전달할 수 있어, 고차 함수와 함수 합성, 부분 적용 등 강력한 기능을 제공한다. 또한 재귀 함수와 꼬리 재귀 최적화를 통해 반복을 명확하고 효율적으로 처리할 수 있으며, 커링을 활용하여 여러 인자를 단계적으로 적용하는 유연한 코드를 작성할 수 있다.",
    "crumbs": [
      "F# - 함수, 함수, 그리고 함수"
    ]
  },
  {
    "objectID": "notes/fsharp05.html#summary",
    "href": "notes/fsharp05.html#summary",
    "title": "F# - 함수, 함수, 그리고 함수",
    "section": "",
    "text": "F#에서 함수는 let 키워드로 정의하며, 간단한 구문과 유형 추론을 통해 매개변수와 반환값을 명시하거나 추론할 수 있다. 함수가 1급 시민으로 취급되므로 다른 값처럼 변수에 할당하거나 인수로 전달할 수 있어, 고차 함수와 함수 합성, 부분 적용 등 강력한 기능을 제공한다. 또한 재귀 함수와 꼬리 재귀 최적화를 통해 반복을 명확하고 효율적으로 처리할 수 있으며, 커링을 활용하여 여러 인자를 단계적으로 적용하는 유연한 코드를 작성할 수 있다.",
    "crumbs": [
      "F# - 함수, 함수, 그리고 함수"
    ]
  },
  {
    "objectID": "notes/fsharp05.html#functions-higher-order-functions-and-recursion",
    "href": "notes/fsharp05.html#functions-higher-order-functions-and-recursion",
    "title": "F# - 함수, 함수, 그리고 함수",
    "section": "Functions, Higher-Order Functions, and Recursion",
    "text": "Functions, Higher-Order Functions, and Recursion\nF#에서 함수를 정의하고 사용하는 데 필요한 필수 개념을 소개합니다. 해당 부분은 F#의 시작이자, 전부라 할 수 있습니다. 해당 부분을 통해서 표현력 높고, 재사용이 가능한 코드를 작성하기 위한 함수형 언어의 특징을 확인하실 수 있습니다.\n\nDefining Functions and Basic Syntax\n\n함수는 함수형 프로그래밍 패러다임의 중심이 되는 핵심 구조입니다. 함수는 특정 작업을 수행하도록 정의되며 재사용 가능한 코드 블록을 만드는 데 기본이 됩니다. 기본 구조는 함수의 이름을 지정하고 매개변수와 반환값을 지정하는 것입니다. 함수를 사용하면 복잡한 로직을 관리 가능하고 재사용 가능한 구성 요소로 추상화할 수 있으므로 함수를 정의하고 사용하는 방법을 이해하는 것이 중요합니다.\n\nFirst-Class and Higher-Order Functions\n\nF#에서 함수는 1급 함수입니다. 즉, 다른 값처럼 취급할 수 있습니다. 이를 통해 다른 함수를 인수로 받거나 함수를 결과로 반환하는 함수인 고차 함수를 사용할 수 있습니다. 고차 함수는 여러 함수를 결합하여 새로운 함수를 생성하는 함수 구성과 같은 강력한 프로그래밍 기법을 가능하게 합니다. 이는 코드 재사용과 함수 구성을 촉진하여 코드를 보다 모듈화하고 유지 관리하기 쉽게 만듭니다. 유연하고 강력한 F# 프로그램을 작성하려면 고차 함수를 이해하는 것이 필수적입니다.\n\nRecursive Functions and Tail Recursion\n\n재귀는 함수형 프로그래밍의 기본 개념으로, 함수가 스스로를 호출하여 문제의 작은 부분을 해결하는 방식입니다. F#에서 재귀 함수는 기존의 반복 구성을 대체하여 특정 알고리즘을 보다 자연스럽게 표현할 수 있습니다. 재귀는 함수형 구조와 결합할 때 특히 강력할 수 있습니다. 재귀 호출이 함수의 최종 연산이 되는 꼬리 재귀는 중요한 최적화 기법입니다. 호출 스택을 늘리지 않고 재귀 함수를 실행할 수 있으므로 성능이 향상되고 스택 오버플로 문제를 방지할 수 있습니다.\n\nFunction Composition and Partial Application\n\n함수 합성과 부분 적용은 함수형 프로그래밍 고급 기법입니다. 두 기법 모두 기존의 연산을 활용하는 것이 주된 목적이빈다. 이러한 기술을 통해 개발자는 보다 표현력이 풍부하고 재사용 가능한 함수를 구축하여 문제 해결에 대한 기능적 접근을 용이하게 할 수 있습니다.\n\nDefining Functions\nF#에서 함수는 let 키워드 다음에 함수 이름, 매개 변수, 함수 본문을 사용하여 정의합니다. 이 구문은 간단하고 명확성을 강조하므로 코드를 유지 관리하고 이해하는 데 매우 중요합니다. 예를 들어 두 숫자를 더하는 간단한 함수를 정의하려면 다음과 같이 작성합니다. F#의 유형 추론 시스템은 사용법에 따라 매개변수의 유형과 반환값을 자동으로 결정합니다. 예를 들어 add 함수는 사용 방식에 따라 정수 또는 부동 소수점 숫자로 작동하는 것으로 추론됩니다. 그러나 가독성을 높이고 오류를 방지하기 위해 유형을 명시적으로 지정할 수도 있습니다:\nlet add x y = x + y\nlet add (x: int) (y: int) : int = x + y\nF#의 함수는 더 복잡한 경우 여러 줄로 정의할 수도 있습니다. 들여쓰기를 사용하여 함수 본문과 함수 정의를 구분할 수 있습니다. 이 함수에서 계산이자는 원금, 이자율, 연수를 기준으로 이자를 계산합니다. 함수 내부에서 let 키워드를 사용하여 지역 변수 이자를 정의하면 계산이 간단해집니다. 함수 본문은 여러 줄에 걸쳐 있으며 결과는 최종 이자 값입니다.\nlet calculateDiscriminant a b c =\n    let discriminant = (b * b) - 4 * a * c\n    discriminant\n\n\nFunction Parameters and Curried Functions\nF# 함수는 여러 매개변수가 있는 함수를 부분적으로 적용할 수 있는 커링을 지원합니다. 즉, 하나의 매개변수를 취하고 나머지 매개변수를 취하는 다른 함수를 반환하는 함수를 정의할 수 있습니다. double은 곱하기 함수에 2를 첫 번째 인수로 적용하여 만든 새로운 함수입니다. double을 단일 인수로 호출하면 해당 인수에 2를 곱합니다.\nlet multiply x y = x * y\nlet double = multiply 2\n\n\nNamed and Anonymous Functions\nF#에서는 명명된 함수와 익명 함수를 모두 사용할 수 있습니다. 명명된 함수는 앞서 설명한 대로 let 키워드를 사용하여 정의합니다. 람다 함수라고도 하는 익명 함수는 짧은 일회성 연산에 유용합니다. fun x -&gt; x * x는 입력을 제곱하는 익명 함수입니다. List.map과 함께 숫자 목록의 각 요소에 제곱 연산을 적용하는 데 사용됩니다.\n\nlet numbers = [1; 2; 3; 4; 5]\nlet squaredNumbers = List.map (fun x -&gt; x * x) numbers\n\n\nFunction Arguments and Default Values\nF# 함수에는 매개변수에 대한 기본값을 지정할 수도 있습니다. 이를 통해 정의된 매개변수 수보다 적은 수의 인수로 호출할 수 있는 유연한 함수를 만들 수 있습니다. 이 경우 greet에는 이름과 인사말이 모두 필요하지만 greetWithDefault는 기본 인사말(“Hello”)을 사용합니다. 이 패턴은 적절한 기본값을 가진 선택적 매개변수가 있는 함수에 유용합니다.\nlet greet name (salutation: string) =\n    printfn \"%s, %s!\" salutation name\nlet greetWithDefault name =\n    greet name \"Hello\"\n\n\nRecursive Functions\nF#은 함수가 문제를 해결하기 위해 스스로를 호출하는 재귀를 지원합니다. 예를 들어 계승 함수는 종종 재귀적으로 정의됩니다:\nlet rec factorial n =\n    if n &lt;= 1 then 1\n    else n * factorial (n - 1)\nfactorial은 숫자 n의 계승을 계산하는 재귀 함수이며, rec 키워드는 해당 함수가 재귀 함수임을 나타냅니다. F#의 재귀 함수는 강력하지만 성능 문제를 피하기 위해 주의해서 사용해야 하므로 고급 시나리오에서는 꼬리 재귀 최적화를 고려해야 합니다. F#에서 함수를 정의하는 것은 직관적이고 강력하며 유형 추론, 여러 줄 함수 정의, 커링 및 재귀를 활용하여 광범위한 프로그래밍 작업을 효율적으로 처리할 수 있습니다.\n\n\nFirst-Class and Higher-Order Functions\nF#에서 함수는 단순한 연산이나 프로시저가 아니라 1급 시민입니다. 이 기본 개념 덕분에 함수는 다른 데이터 유형과 마찬가지로 취급할 수 있습니다. 변수에 할당하고, 인수로 전달하고, 다른 함수에서 반환할 수 있습니다. 이 섹션에서는 일차 함수와 고차 함수의 특성 및 F#에서의 실제 적용에 대해 살펴봅니다.\n\n\nFirst-Class Functions\nF#에서 함수는 정수나 문자열과 같은 다른 데이터 유형처럼 쉽게 조작할 수 있는 1등 시민입니다. 이러한 특성은 함수형 프로그래밍에서 핵심적인 요소로, 높은 수준의 유연성과 추상화를 가능하게 합니다. 예를 들어 변수에 함수를 할당할 수 있습니다:\nlet add x y = x + y\nlet addFunction = add\nlet result = addFunction 5 3 // result is 8\n여기서 addFunction에는 add 함수가 할당되어 있습니다. 이는 함수가 다른 값과 마찬가지로 전달될 수 있음을 보여줍니다. 함수는 다른 함수에서 반환될 수도 있어 다용도로 사용할 수 있음을 보여줍니다. 다른 함수를 반환하는 함수를 생각해 봅시다:\nlet multiplier factor =\n    let multiply x = x * factor\n        multiply\nlet double = multiplier 2\nlet result = double 5 // result is 10\n\n\nHigher-Order Functions\n고차 함수는 다른 함수를 인수로 받거나 함수를 결과로 반환하는 함수입니다. 이 개념은 함수형 프로그래밍의 강력한 기능으로, 보다 선언적이고 모듈화된 스타일의 코딩을 가능하게 합니다. 일반적인 고차 함수 중 하나는 목록의 각 요소에 주어진 함수를 적용하는 맵입니다: 이 경우 List.map은 제곱을 인수로 받아 각 요소에 숫자로 적용하여 새로운 목록 [1; 4; 9; 16; 25]를 생성하는 고차 함수입니다.\nlet numbers = [1; 2; 3; 4; 5]\nlet square x = x * x\nlet squaredNumbers = List.map square numbers\n고차 함수의 또 다른 예로는 술어 함수를 기반으로 요소를 선택하는 필터가 있습니다: 여기서 List.filter는 isEven 함수를 술어로 사용하여 숫자에서 짝수 목록을 반환합니다.\nlet isEven x = x % 2 = 0\nlet evenNumbers = List.filter isEven numbers\n\n\nFunction Composition and Partial Application\nF#은 고차 함수와 관련된 함수 합성과 부분 적용을 지원합니다. &gt;&gt;는 합성 연산자로, add1을 적용한 다음 multiply2를 적용하는 새 함수 add1ThenMultiply2를 만듭니다. 부분 적용은 함수에 여러 인수를 고정하여 다른 함수를 생성하는 것을 말합니다.\nlet add1 x = x + 1\nlet multiply2 x = x * 2\nlet add1ThenMultiply2 = add1 &gt;&gt; multiply2\nlet result = add1ThenMultiply2 3 // result is 8\n여기서 거듭제곱은 두 개의 인수를 받는 함수입니다. 파워에 2를 부분적으로 적용하여 인수의 거듭제곱으로 2를 계산하는 새로운 함수 제곱을 생성하여 효과적으로 제곱합니다.\nlet power base exponent = pown base exponent\nlet square = power 2\nlet result = square 3 // result is 8\n\n\nAnonymous Functions\n합성과 부분 적용을 위해서 익명 함수 또는 람다 식을 활용합니다.\nlet numbers = [1; 2; 3; 4; 5]\nlet squaredNumbers = List.map (fun x -&gt; x * x) numbers\n\n\nFunction Currying\nF# 함수는 기본적으로 커링되어 있으므로 각각 단일 인수를 사용하는 일련의 함수로 자동 변환됩니다. 커링을 사용하면 함수를 보다 유연하게 적용할 수 있습니다. 여기서 add는 5를 부분적으로 적용하여 add5로 커링됩니다. 이제 add5는 입력에 5를 더하는 함수가 됩니다. 실용적인 예제 효과적인 함수형 코드를 작성하려면 일차 및 고차 함수를 이해하는 것이 중요합니다. 이러한 함수는 달성 방법보다는 달성하고자 하는 것을 설명하는 선언적 스타일을 촉진합니다. 이는 보다 간결하고 재사용 가능하며 읽기 쉬운 코드로 이어집니다.\nlet add x y = x + y\nlet add5 = add 5\nlet result = add5 3 // result is 8\n\n\nRecursive Functions and Tail Recursion\n함수형 프로그래밍에서 재귀는 기존의 반복 구조 없이 반복적인 작업을 수행하는 데 사용되는 기본 개념입니다. F#은 재귀를 광범위하게 활용하여 반복적이거나 계층적인 데이터 구조와 관련된 문제에 대한 우아한 솔루션을 제공합니다. 이 섹션에서는 재귀 함수를 정의하고, 꼬리 재귀를 이해하고, F#의 성능에 미치는 영향을 살펴봅니다.\n\n\nDefining Recursive Functions\n재귀 함수는 정의 내에서 스스로를 호출하여 문제를 더 작은 하위 문제로 분해하여 해결하는 함수입니다. 재귀의 대표적인 예는 숫자의 계승을 계산하는 것으로, 함수를 호출할 때마다 숫자에 숫자의 계승에서 1을 뺀 값을 곱하는 것입니다:\nlet rec factorial n =\nif n &lt;= 1 then 1\nelse n * factorial (n - 1)\n이 계승 함수에서 rec 키워드는 함수가 재귀적임을 나타내는 데 사용됩니다. 이 함수는 n이 1보다 작거나 같은지 확인하며, 이 경우 1을 반환합니다. 그렇지 않으면 n에 n - 1의 계승을 곱하여 문제 크기를 재귀적으로 줄입니다. 또 다른 예로는 피보나치 수열이 있는데, 각 숫자는 앞의 두 숫자의 합입니다:\nlet rec fibonacci n =\nif n &lt;= 1 then n\nelse fibonacci (n - 1) + fibonacci (n - 2)\n이 피보나치 함수는 또한 재귀를 사용하여 위치 n에서 피보나치 수를 계산합니다. 기본 사례(n &lt;= 1)에 도달할 때까지 문제를 계속 세분화한 다음 더 작은 하위 문제의 결과를 결합합니다.\n\n\nTail Recursion\n재귀는 간단하고 우아할 수 있지만 호출 스택의 증가로 인해 성능 문제가 발생할 수 있습니다. 각 재귀 호출은 스택에 새 프레임을 추가하므로 재귀 깊이가 너무 크면 스택 오버플로 오류가 발생할 수 있습니다. 꼬리 재귀는 이 문제를 완화하는 데 도움이 되는 기술입니다. 꼬리 재귀 함수는 재귀 호출이 함수의 최종 연산이 되는 재귀 함수입니다. 이를 통해 F# 컴파일러는 재귀를 최적화하여 새 함수를 만드는 대신 현재 함수의 스택 프레임을 재사용할 수 있습니다.\nlet factorial n =\n    let rec factorialTail acc n =\n        if n &lt;= 1 then acc\n        else factorialTail (acc * n) (n - 1)\n    factorialTail 1 n\nfactorialTail에 대한 재귀 호출은 함수의 마지막 연산이므로 꼬리 재귀가 됩니다. 이렇게 하면 재귀적으로 호출할 때마다 스택이 커지는 것을 방지할 수 있습니다. 마찬가지로 피보나치 함수를 꼬리 재귀적으로 리팩터링할 수 있습니다. 여기서 피보나치테일은 피보나치 수열에서 앞의 두 숫자를 나타내는 두 개의 a와 b를 유지합니다. 재귀 호출은 마지막 연산으로 꼬리 재귀 최적화를 보장합니다.\nlet fibonacci n =\n    let rec fibonacciTail a b n =\n        if n = 0 then a\n        else fibonacciTail b (a + b) (n - 1)\n    fibonacciTail 0 1 n\n\n\nBenefits of Tail Recursion\n\n성능 향상\n\n꼬리 재귀 함수는 컴파일러가 일정한 스택 공간에서 실행되도록 최적화할 수 있으므로 스택 오버플로의 위험을 줄이고 심층 재귀의 성능을 향상시킬 수 있음습니다.\n\n코드 정리\n\n꼬리 재귀 함수는 특히 재귀에 자연스럽게 적합한 문제의 경우 반복 솔루션에 비해 더 깔끔하고 가독성 높은 코드를 생성하는 경우가 많음\n\n함수형 프로그래밍 패러다임\n\n꼬리 재귀는 불변성과 선언적 문제 해결을 강조함으로써 함수형 프로그래밍 원칙에 부합\n\n실용적인 고려 사항\n\n재귀 함수에 명확하고 정확한 베이스 케이스가 있는지 확인하여 무한 재귀와 잠재적인 스택 오버플로를 방지\n재귀 깊이가 클 수 있는 경우 함수를 꼬리 재귀로 리팩터링하여 컴파일러 최적화를 활용\n꼬리 재귀는 성능을 향상시키지만 코드 가독성과 유지보수성을 우선, 많은 문제에서 간단한 재귀 솔루션이 복잡한 꼬리 재귀 솔루션보다 더 이해하기 쉽고 유지 관리가 쉬움\n\n실제 사용 예\n\n데이터 처리\n\n재귀 함수는 트리나 그래프와 같은 계층적 데이터 구조를 처리하는 데 자주 사용되며, 각 노드나 에지는 재귀적인 방식으로 처리될 수 있음\n\n알고리즘 설계\n\n정렬 및 검색과 같은 많은 알고리즘은 재귀를 사용해 문제를 더 작고 관리하기 쉬운 조각으로 분해\n\n수학적 계산\n\n재귀 함수는 조합 문제나 수학적 방법과 같이 작은 하위 문제로 자연스럽게 표현할 수 있는 수학 문제를 푸는 데 유용\n\n\n\n\n\nFunction Composition and Partial Application\n함수형 프로그래밍에서 함수 합성과 부분 적용은 유연성과 표현력을 향상시키는 핵심 개념입니다. 이러한 기술을 통해 개발자는 더 간단한 함수로 복잡한 함수를 만들고, 사용을 간소화하며, 코드 재사용을 촉진할 수 있습니다. 함수 합성은 두 개 이상의 함수를 결합하여 새로운 함수를 만드는 것을 말합니다. F#에서 함수 합성은 합성(composition) 연산자(&gt;&gt;, &lt;&lt;)를 사용하여 쉽게 수행할 수 있습니다. 함수 합성을 사용하면 간단한 연산에서 복잡한 연산을 만들어 코드를 더 읽기 쉽고 재사용 가능하게 만들 수 있습니다.\nlet double x = x 2\nlet addTen x = x + 10\nlet doubleAndAddTen = double &gt;&gt; addTen\nlet result = doubleAndAddTen 5 // Result is 20 (5_ 2 + 10)\n\n\nBackward Composition\n역방향 구성은 함수를 반대 순서로 합성하는 개념입니다. F#에서는 이를 위해 &lt;&lt; 연산자를 사용합니다. addTen &lt;&lt; double을 사용하면 addTen이 double 다음에 적용됩니다. double이 먼저 적용된 다음 addTen이 결과에 적용됩니다.\nlet addTenThenDouble = addTen &lt;&lt; double\nlet result = addTenThenDouble 5 // Result is 20 (5 \\* 2 + 10)\n\n\nPartial Application\n부분 적용이란 일부 인수만 사용하고, 나머지 인수를 지연하여 바인딩하여 마치 새로운 함수를 정의하는 것 같은 효과를 제공하는 기법이다. 이 기술을 사용하면 함수를 재정의하지 않고도 특수한 버전의 함수를 만들 수 있습니다. 거듭제곱 함수를 부분적으로 적용하여 숫자의 제곱을 계산하는 새 함수를 만들 수 있습니다. 여기서 power 2.0은 기본 인수가 2.0으로 고정된 부분적으로 적용된 함수입니다. 새로운 함수 제곱은 지수 인수만 필요합니다. 부분 적용은 함수 호출을 간소화하고 코드 재사용을 촉진합니다. 일부 인수를 수정하여 필요에 맞는 보다 구체적인 함수를 만들 수 있습니다.\nlet power base exponent = base ** exponent\nlet square = power 2.0\nlet result = square 3.0 // Result is 8.0 (2.0** 3.0)\n\n\nCombining Composition and Partial Application\n함수 합성과 부분 적용을 결합하여 강력하고 유연한 함수를 만들 수 있습니다. 부분적으로 적용된 함수를 구성하여 복잡한 연산을 재정의 할 수 있습니다. multiplyBy2와 addFive는 부분 적용된 함수입니다. 함수 합성으로 구성된 multiplyAndAdd는 먼저 2를 곱한 다음 5를 더합니다.\nlet multiplyBy factor = fun x -&gt; x * factor\nlet multiplyBy2 = multiplyBy 2\nlet addOffset offset x = x + offset\nlet addFive = addOffset 5\nlet multiplyAndAdd = multiplyBy2 &gt;&gt; addFive\nlet result = multiplyAndAdd 10 // Result is 25 (( 10 * 2) + 5)",
    "crumbs": [
      "F# - 함수, 함수, 그리고 함수"
    ]
  },
  {
    "objectID": "notes/fsharp03.html",
    "href": "notes/fsharp03.html",
    "title": "F# - 변수",
    "section": "",
    "text": "F#에서 변수는 기본적으로 불변(immutable)이며, let 키워드를 사용해 정의한 후에는 값을 변경할 수 없다. 필요한 경우에는 mutable 키워드를 통해 변경 가능한 변수를 정의할 수 있지만, 불변 구조가 제공하는 예측 가능성과 안정성 때문에 함수형 프로그래밍에서는 주로 불변성을 활용한다. 리스트와 튜플, 레코드 같은 F#의 데이터 구조도 기본적으로 불변이며, 기존 데이터를 바꾸지 않고 새로운 값이나 데이터 구조를 만들어내는 방식으로 동작한다. 이러한 불변성은 멀티스레딩 환경에서도 안전하고, 구조 공유와 영구 데이터 구조 등의 최적화를 통해 효율적으로 관리된다. 변수의 범위(scope)는 정의된 위치에 따라 결정되며, 변수 가려짐(variable shadowing)이 발생할 수도 있으므로 신중하게 사용해야 한다.",
    "crumbs": [
      "F# - 변수"
    ]
  },
  {
    "objectID": "notes/fsharp03.html#summary",
    "href": "notes/fsharp03.html#summary",
    "title": "F# - 변수",
    "section": "",
    "text": "F#에서 변수는 기본적으로 불변(immutable)이며, let 키워드를 사용해 정의한 후에는 값을 변경할 수 없다. 필요한 경우에는 mutable 키워드를 통해 변경 가능한 변수를 정의할 수 있지만, 불변 구조가 제공하는 예측 가능성과 안정성 때문에 함수형 프로그래밍에서는 주로 불변성을 활용한다. 리스트와 튜플, 레코드 같은 F#의 데이터 구조도 기본적으로 불변이며, 기존 데이터를 바꾸지 않고 새로운 값이나 데이터 구조를 만들어내는 방식으로 동작한다. 이러한 불변성은 멀티스레딩 환경에서도 안전하고, 구조 공유와 영구 데이터 구조 등의 최적화를 통해 효율적으로 관리된다. 변수의 범위(scope)는 정의된 위치에 따라 결정되며, 변수 가려짐(variable shadowing)이 발생할 수도 있으므로 신중하게 사용해야 한다.",
    "crumbs": [
      "F# - 변수"
    ]
  },
  {
    "objectID": "notes/fsharp03.html#변수",
    "href": "notes/fsharp03.html#변수",
    "title": "F# - 변수",
    "section": "변수",
    "text": "변수\n변수 정의는 모든 언어에서 가장 중요한 작업입니다. 문제를 해결하는데 토대를 마련하는 기본적인 도구입니다. F#은 변수는 값을 변하지 않습니다. F#에서 변수와 함수는 일반적으로 let 키워드를 사용하여 정의합니다. 불변이란 의미는 변수에 값이 할당된 후에는 값을 변경 할 수 없습니다.\nlet e = 2.71\n// e &lt;- 3.14 // 오류 발생\nprintfn $\"{e}!\"\nF#은 필요한 경우 변경 가능한 변수를 생성하는 방법을 제공합니다. 이 작업은 mutable 키워드를 사용하여 수행됩니다.\nlet mutable e = 2.71\n// e &lt;- 3.14 // 오류 발생\nprintfn $\"{e}!\"\n불변성은 F#의 데이터 구조에 영향을 미칩니다. 리스트, 튜플 및 레코드는 기본적으로 불변입니다. @연산은 number에 [5; 6]을 추가하여 concatNumber를 새롭게 생성합니다. 기존의 number 리스트는 변경되지 않고 유지되므로 불변성의 원리가 작동하는 것을 알 수 있습니다. 예를 들어, 변하지 않는 변수는 확정적인 값을 제공합니다. 불변성은 기존 값을 수정하지 않고 새로운 값을 반환하는 함수형 프로그래밍 원칙입니다.\nlet number = [1; 2; 3; 4]\nlet concatNumber = number @ [5; 6]\n불변성은 메모리 혹은 연산의 오버헤드를 발생하는 것처럼 보입니다. 하지만, 이러한 방식은 더 효율적이고 예측 가능한 코드를 제공합니다. 불변 데이터 구조는 본질적으로 스레드에 안전하므로 동시 수정에 대한 걱정 없이 여러 스레드에서 공유할 수 있습니다. 또한 F#을 비롯한 많은 함수형 프로그래밍 언어에서는 구조 공유(structural sharing) 및 영구 데이터 구조(persistent data structures)와 같은 고급 최적화를 활용하여 불변 데이터를 효율적으로 관리합니다. F#은 패턴 매칭, 고차 함수 및 함수 합성과 같은 불변성에 기반한 함수형 기법을 활용하고, 해야 합니다. 불변성은 데이터 구조가 사용 내내 일관성을 유지하도록 함으로써 이러한 기술을 단순화합니다. 함수형 언어에서 불변성은 옵션이 아니라 필수라 할 수 있습니다.\nlet ogList = [1; 2; 3]\nlet edList = 0 :: ogList\n\nScoping\nF#에서 변수는 값에 바인딩(biding)되며, 그 범위(scope)는 변수가 정의된 위치에 따라 결정됩니다. 변수의 범위는 변수가 선언된 코드 블록에 국한됩니다.\nlet outerName = \"I am Jone Doe\"\n\nlet printName() =\n    let innerName = \"I am Jane Doe\"\n    printfn $\"{outerName}\"\n    printfn $\"{innerName}\"\n\nprintName()\n변수 가려짐(variable shadowing)은 새 변수가 기존 변수와 같은 이름으로 정의되어 특정 범위 내에서 이전 변수를 숨길 때 발생합니다. 예를 들어 아래 예제에서 함수 내부에 정의된 x는 외부 x를 가립니다. 그 결과 내부 x는 10의 값을 가지지만 외부 x는 5로 유지됩니다. 변수의 가림 효과는 변수 범위를 제한하고 의도하지 않은 부작용을 방지하는 데 유용한 기법이지만 코드 명확성을 유지하기 위해 신중하게 사용해야 합니다.\nlet x = 5\nlet showX() =\n    let x = 10\n    printfn $\"Inner x: {x}\"\n\nprintfn $\"Outer x: {x}\"\nshowX()\n모든 언어는 변수와 변수의 영역에 관한 규칙을 올바르게 이해하고 있어야 합니다. F# 또한 예외가 아닙니다. 변수의 영역 규칙은 코드 내에서 데이터가 전달되고 수정되는 방식에 영향을 줍니다. 변수의 영역 규칙을 명확하고 유지 관리가 쉽도록 작성해야 합니다.",
    "crumbs": [
      "F# - 변수"
    ]
  },
  {
    "objectID": "notes/fsharp01.html",
    "href": "notes/fsharp01.html",
    "title": "F# - 시작하기",
    "section": "",
    "text": "개발자가 특정 언어를 선택하는 것은 프로젝트의 성패에 영향을 미치곤 합니다. 그러나 학습이나 재미를 위해서 혹은 효율이나 생산성과 전혀 관련없지만 ’힙(hip)’한 어떤 것을 선택할 때가 있습니다. 불과 얼마전까지만 해도 학자들의 언어, 혹은 대학원생의 언어로 불렸던 Haskell, Prolog 같은 언어들이 블럭체인이나 머신러닝 등에 활용되고 있다는 것이 대표적인 예 입니다. 효율적인 데이터 처리와 정확한 계산에 대한 수요가 증가함에 따라 비효율적인 언어의 대명사처럼 알려진 함수형 언어에 대한 관심이 높아졌습니다. 함수형 언어는 가파른 학습 곡선으로 인해서 연구용 언어로 취급되었지만 지금은 많은 개발자들이 “효율”과 “안전”을 위해서 선택하기도 합니다. 함수형과 객체지향 프로그래밍 패러다임이 결합되어 나름의 장점을 뽐내는 방법을 고민하고 있습니다. 이를 통해 단순성, 효율성 그리고 안정성을 추구하기도 합니다.\n새로운 프로그래밍 기법을 연습하기 위해서 .NET 플랫폼의 함수형 언어인 F#을 가볍게 배워볼 생각입니다. F#은 복잡한 작업을 간결하고 효과적으로 처리할 수 있을 뿐만 아니라, 개발 관련된 환경이 잘 구성되어 있습니다. F#을 활용해서 불변성, 일급 함수 등 함수형 언어가 제시하는 다양한 개념을 연습할 수 있도록 구성하였습니다. 이러한 연습 혹은 수련을 통해서 함수형 언어를 조금 쉽게 접근할 수 있기를 희망합니다.\nF#을 선택한 이유는 .NET 환경과 원활한 통합입니다. .NET 플랫폼의 일부인 F#은 다양한 라이브러리 및 도구를 제공하기 때문에 Microsoft 기술 스택에 익숙한 개발자에게 완벽한 선택이 될 수 있습니다. F#은 함수형 프로그래밍에 관심이 있는 초급 개발자에서 기존의 중규모 서비스를 개선하기 위한 분들까지 배워볼만한 실용적인 언어라 할 수 있습니다. 혹은 그렇게 되길 희망합니다.\n\n\n\n Back to top",
    "crumbs": [
      "F# - 시작하기"
    ]
  },
  {
    "objectID": "notes/fsharp02.html",
    "href": "notes/fsharp02.html",
    "title": "F# - 강력한 실행 환경",
    "section": "",
    "text": "F#을 학습하기 위해선 VS2022를 설치하는 것이 가장 좋은 방법입니다. VS2022는 디버거를 비롯해서 .NET 개발에 필요한 모든 도구를 지원하고 있습니다. 하지만, VS2022는 윈도우 사용자만 사용할 수 있기 때문에 당분간은 VSCode를 사용해서 해당 튜토리얼을 진행하고자 합니다. 그리고 .NET 등이 어색한 분들을 위해서 VSCode의 Polyglot Notebook를 활용하도록 하겠습니다.",
    "crumbs": [
      "F# - 강력한 실행 환경"
    ]
  },
  {
    "objectID": "notes/fsharp02.html#summary",
    "href": "notes/fsharp02.html#summary",
    "title": "F# - 강력한 실행 환경",
    "section": "",
    "text": "F#을 학습하기 위해선 VS2022를 설치하는 것이 가장 좋은 방법입니다. VS2022는 디버거를 비롯해서 .NET 개발에 필요한 모든 도구를 지원하고 있습니다. 하지만, VS2022는 윈도우 사용자만 사용할 수 있기 때문에 당분간은 VSCode를 사용해서 해당 튜토리얼을 진행하고자 합니다. 그리고 .NET 등이 어색한 분들을 위해서 VSCode의 Polyglot Notebook를 활용하도록 하겠습니다.",
    "crumbs": [
      "F# - 강력한 실행 환경"
    ]
  },
  {
    "objectID": "notes/fsharp02.html#실행-환경",
    "href": "notes/fsharp02.html#실행-환경",
    "title": "F# - 강력한 실행 환경",
    "section": "실행 환경",
    "text": "실행 환경\nF#은 .NET 런타임 상에서 동작하며, Visual Studio, Visual Studio Code, Rider 등 다양한 IDE나 편집기에서 사용할 수 있습니다. Windows, macOS, Linux 등 여러 운영체제를 지원하고, .NET Core(이제는 .NET 5 이상) 환경을 통해 크로스 플랫폼 애플리케이션을 개발할 수 있습니다. 또한 스크립트 파일(.fsx)과 대화형 콘솔(FSI, F# Interactive)을 제공해 빠른 시제품 작성과 실험적인 코드 실행에 유리합니다.\n\nVS2022 활용\n앞선 소개에서 말씀드렸다 싶이, VS2022를 설치해서 F# 관련 프로젝트를 생성하는 것이 가장 좋은 방법입니다. Microsoft에서 제공하는 문서나 다른 교재 등에선 ’Hello, World!’를 출력하기 위해서 함수 및 이름공간(Namespace)을 정의하는 것부터 먼저 학습을 진행합니다. 예를 들어, 아래 코드에서 확인할 수 있듯이 간단한 문자열을 출력하기 위해선 조금은 복잡한 과정(moduel, let, 0)과 지식이 요구됩니다\n// main.fs\nmodule FsharpLearnSyntax\n\n[&lt;EntryPoint&gt;]\nlet main argv =\n    printfn \"Hello, World!\"\n    0\n\n\nInteractive!\nF#의 코드만 빠르게 실행하기 위해선 .NET에서 제공하는 Interactive를 활용하면 main.fs 같은 코드를 작성하지 않고, 간단하고 빠르게 진행할 수 있습니다. main.fsx 파일을 아래와 같이 작성하세요.\n// main.fsx\nprintfn \"Hello, World!\"\n해당 파일을 실행하기 위해서 아래 명령어를 커맨드 라인으로 실행해주세요.\ndotnet fsi main.fsx\n\n\nPolyglot Noteobook\nVSCode를 사용하면, Python의 ipynb와 같은 Polyglot Noteobook을 활용할 수 있습니다. 설치와 관련된 내용은 해당 저장소의 README.md 파일을 참고하세요.\n\n\n\nPolyglot Noteobook",
    "crumbs": [
      "F# - 강력한 실행 환경"
    ]
  },
  {
    "objectID": "notes/fsharp04.html",
    "href": "notes/fsharp04.html",
    "title": "F# - 타입",
    "section": "",
    "text": "F#은 int, float, bool 등 기본 타입뿐 아니라 records, discriminated unions, tuples 같은 복합 타입을 지원하고, 값에 따라 타입을 추론하는 강력한 타입 추론 기능을 제공한다. 다만 타입이 모호하거나 의도를 명확하게 표현해야 할 때는 타입 주석으로 변수, 함수 매개변수, 반환 타입을 지정할 수 있으며, 이는 복잡한 타입 구조를 다룰 때 특히 유용하다. 또한 F#의 제네릭을 활용하면 ’a, ’b와 같은 타입 매개변수를 통해 재사용 가능한 함수나 컴포넌트를 작성할 수 있다. 리스트나 튜플 같은 컬렉션 내부의 요소 타입도 자동으로 추론해주어 간결하면서도 안전한 코드를 구현할 수 있다.",
    "crumbs": [
      "F# - 타입"
    ]
  },
  {
    "objectID": "notes/fsharp04.html#summary",
    "href": "notes/fsharp04.html#summary",
    "title": "F# - 타입",
    "section": "",
    "text": "F#은 int, float, bool 등 기본 타입뿐 아니라 records, discriminated unions, tuples 같은 복합 타입을 지원하고, 값에 따라 타입을 추론하는 강력한 타입 추론 기능을 제공한다. 다만 타입이 모호하거나 의도를 명확하게 표현해야 할 때는 타입 주석으로 변수, 함수 매개변수, 반환 타입을 지정할 수 있으며, 이는 복잡한 타입 구조를 다룰 때 특히 유용하다. 또한 F#의 제네릭을 활용하면 ’a, ’b와 같은 타입 매개변수를 통해 재사용 가능한 함수나 컴포넌트를 작성할 수 있다. 리스트나 튜플 같은 컬렉션 내부의 요소 타입도 자동으로 추론해주어 간결하면서도 안전한 코드를 구현할 수 있다.",
    "crumbs": [
      "F# - 타입"
    ]
  },
  {
    "objectID": "notes/fsharp04.html#type-inferences",
    "href": "notes/fsharp04.html#type-inferences",
    "title": "F# - 타입",
    "section": "Type Inferences",
    "text": "Type Inferences\nF#은 int, float, bool과 같은 기본 타입은 물론 records, discriminated unions, tuples 같은 collection 타입을 지원합니다. F#의 타입 추론(type inference)은 값(value)에 따라 컴파일러가 타입을 추론합니다. 컴파일러가 값을 기반으로 변수의 유형을 추론할 수 있는 경우가 많지만, 타입을 명확히 하고 싶거나 모호한 경우 타입을 타입 주석(type annotation)을 사용해서 명시적으로 제공할 수도 있습니다. 타입 주석은 함수나 변수의 타입을 강제하여 오류를 방지할 수 있으므로 복잡한 함수를 정의할 때 유용합니다. F#에서 타입 추론과 타입 주석은 강력하고 표현력이 풍부한 코드를 작성하는 데 중요한 역할을 합니다.\n아래와 같이 기본 타입으로 구성되어, 간단한 경우에는 타입 추론을 활용하는 것을 권장합니다.\nlet hello = \"Hello, FP!\"\nlet e: float = 2.71\nlet isTrue: bool = true\n함수의 경우에도 정수에 대해 연산하는 + 연산자가 사용되었으므로 x와 y의 유형이 int라고 추론합니다. 함수의 타입은 int -&gt; int -&gt; int로 추론되며, 이는 두 개의 정수를 입력으로 받아 정수를 반환한다는 의미입니다. 이러한 타입 추론은 명시적인 유형 선언의 필요성을 줄여 코드를 더욱 간결하게 만듭니다.\nlet sum x y = x + y",
    "crumbs": [
      "F# - 타입"
    ]
  },
  {
    "objectID": "notes/fsharp04.html#type-annotations",
    "href": "notes/fsharp04.html#type-annotations",
    "title": "F# - 타입",
    "section": "Type Annotations",
    "text": "Type Annotations\nF#의 타입 추론은 강력하지만 명시적으로 타입을 표현해야 할 때가 있습니다. 타입 주석은 변수나 함수의 의도를 명시적으로 표현하여 타입을 기반으로 한 안전성을 보장합니다. 타입 주석은 변수, 함수, 함수 매개 변수 및 반환 값에 타입을 지정하는 데 사용합니다. 아래 예제에서는 width와 height의 유형이 명시적으로 float로 선언되어 있으며, getArea 함수의 반환 유형도 float로 지정되어 있습니다. 타입 주석은 함수 이름을 명시적으로 만들어주며, 문서화 및 복잡한 타입으로 작업할 때 유용합니다.\nlet getArea (width: float) (height: float) : float = width * height",
    "crumbs": [
      "F# - 타입"
    ]
  },
  {
    "objectID": "notes/fsharp04.html#type-annotations-with-generics",
    "href": "notes/fsharp04.html#type-annotations-with-generics",
    "title": "F# - 타입",
    "section": "Type Annotations with Generics",
    "text": "Type Annotations with Generics\nF#은 제네릭을 지원하며, 타입 주석을 사용하여 타입 매개변수를 지정할 수 있습니다. 이를 통해 다양한 타입으로 구성된 재사용 가능한 컴포넌트를 만들 수 있습니다. 예를 들어, 'a와 'b는 타입 매개 변수이고 swap은 x와 y의 값을 교환하는 함수입니다. 타입 주석 : 'b * 'a는 함수가 첫 번째 요소가 유형 ’b이고 두 번째 요소가 유형 ’a인 튜플을 반환하도록 지정합니다. 이는 일반 유형을 유형 어노테이션과 함께 활용하여 유연하고 재사용 가능한 코드를 만드는 방법을 보여줍니다. 해당 사항에 대해선 뒷부분에 좀 더 자세히 다루도록 하겠습니다.\nlet swap (x: 'a) (y: 'b) : 'b * 'a = (y, x)\nlet result = swap 5 \"Hello\"\nprintfn $\"{result}\"",
    "crumbs": [
      "F# - 타입"
    ]
  },
  {
    "objectID": "notes/fsharp04.html#type-inference-with-collections",
    "href": "notes/fsharp04.html#type-inference-with-collections",
    "title": "F# - 타입",
    "section": "Type Inference with Collections",
    "text": "Type Inference with Collections\nF#의 컬렉션의 컨텍스트에서 원소의 타입을 추론하므로 타입 추론이 원활하게 작동합니다. 예를 들어 정수 목록을 정의하면 F#은 해당 유형을 int 목록으로 추론합니다. 이 경우 F#은 목록 내의 요소를 기반으로 숫자가 int 목록 유형이라고 추론합니다. 이러한 유형 추론은 각 요소에 대한 명시적인 유형 주석 없이 컬렉션 작업을 하는 데 도움이 됩니다.\nlet number = [1; 2; 3; 4]\nprintfn $\"{number}\"",
    "crumbs": [
      "F# - 타입"
    ]
  }
]