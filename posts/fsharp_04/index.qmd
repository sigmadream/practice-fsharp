---
title: "4. F# - 타입"
author: "Sangkon Han"
date: "2024-11-05"
categories: [F#, .NET]
---
타입 추론을 적극적으로 사용하세요. 복잡하거나, 의도를 명확하게 알려주고 싶다면, 타입을 명시적으로 작성하세요. 해당 타입에 대한 별도의 설명이나 사용 의도를 문서화하면 가독성과 유지 관리에 도움이 됩니다.

### Type Inferences

F#은 `int`, `float`, `bool과` 같은 기본 타입은 물론 `records`, `discriminated unions`, `tuples` 같은 collection 타입을 지원합니다. F#의 타입 추론(type inference)은 값(value)에 따라 컴파일러가 타입을 추론합니다. 컴파일러가 값을 기반으로 변수의 유형을 추론할 수 있는 경우가 많지만, 타입을 명확히 하고 싶거나 모호한 경우 타입을 타입 주석(type annotation)을 사용해서 명시적으로 제공할 수도 있습니다. 타입 주석은 함수나 변수의 타입을 강제하여 오류를 방지할 수 있으므로 복잡한 함수를 정의할 때 유용합니다. F#에서 타입 추론과 타입 주석은 강력하고 표현력이 풍부한 코드를 작성하는 데 중요한 역할을 합니다. 

아래와 같이 기본 타입으로 구성되어, 간단한 경우에는 타입 추론을 활용하는 것을 권장합니다.

```fsharp
let hello = "Hello, FP!"
let e: float = 2.71
let isTrue: bool = true
```

함수의 경우에도 정수에 대해 연산하는 `+` 연산자가 사용되었으므로 `x`와 `y`의 유형이 `int`라고 추론합니다. 함수의 타입은 `int -> int -> int`로 추론되며, 이는 두 개의 정수를 입력으로 받아 정수를 반환한다는 의미입니다. 이러한 타입 추론은 명시적인 유형 선언의 필요성을 줄여 코드를 더욱 간결하게 만듭니다.

```fsharp
let sum x y = x + y
```

### Type Annotations

F#의 타입 추론은 강력하지만 명시적으로 타입을 표현해야 할 때가 있습니다. 타입 주석은 변수나 함수의 의도를 명시적으로 표현하여 타입을 기반으로 한 안전성을 보장합니다. 타입 주석은 변수, 함수, 함수 매개 변수 및 반환 값에 타입을 지정하는 데 사용합니다. 아래 예제에서는 `width`와 `height`의 유형이 명시적으로 `float`로 선언되어 있으며, `getArea` 함수의 반환 유형도 `float`로 지정되어 있습니다. 타입 주석은 함수 이름을 명시적으로 만들어주며, 문서화 및 복잡한 타입으로 작업할 때 유용합니다.

```fsharp
let getArea (width: float) (height: float) : float = width * height
```

### Type Annotations with Generics

F#은 제네릭을 지원하며, 타입 주석을 사용하여 타입 매개변수를 지정할 수 있습니다. 이를 통해 다양한 타입으로 구성된 재사용 가능한 컴포넌트를 만들 수 있습니다. 예를 들어, `'a`와 `'b`는 타입 매개 변수이고 `swap`은 x와 y의 값을 교환하는 함수입니다. 타입 주석 `: 'b * 'a`는 함수가 첫 번째 요소가 유형 'b이고 두 번째 요소가 유형 'a인 튜플을 반환하도록 지정합니다. 이는 일반 유형을 유형 어노테이션과 함께 활용하여 유연하고 재사용 가능한 코드를 만드는 방법을 보여줍니다. 해당 사항에 대해선 뒷부분에 좀 더 자세히 다루도록 하겠습니다.

```fsharp
let swap (x: 'a) (y: 'b) : 'b * 'a = (y, x)
let result = swap 5 "Hello"
printfn $"{result}"
```

#### Type Inference with Collections

F#의 컬렉션의 컨텍스트에서 원소의 타입을 추론하므로 타입 추론이 원활하게 작동합니다. 예를 들어 정수 목록을 정의하면 F#은 해당 유형을 `int` 목록으로 추론합니다. 이 경우 F#은 목록 내의 요소를 기반으로 숫자가 `int` 목록 유형이라고 추론합니다. 이러한 유형 추론은 각 요소에 대한 명시적인 유형 주석 없이 컬렉션 작업을 하는 데 도움이 됩니다.

```fsharp
let number = [1; 2; 3; 4]
printfn $"{number}"
```
