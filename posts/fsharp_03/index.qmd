---
title: "3. F# - 변수"
author: "Sangkon Han"
date: "2024-11-05"
categories: [F#, .NET]
---

변수 정의는 모든 언어에서 가장 중요한 작업입니다. 문제를 해결하는데 토대를 마련하는 기본적인 도구입니다. F#은 변수는 값을 변하지 않습니다. F#에서 변수와 함수는 일반적으로 `let` 키워드를 사용하여 정의합니다. 불변이란 의미는 변수에 값이 할당된 후에는 값을 변경 할 수 없습니다.

```fsharp
let e = 2.71
// e <- 3.14 // 오류 발생
printfn $"{e}!"
```

F#은 필요한 경우 변경 가능한 변수를 생성하는 방법을 제공합니다. 이 작업은 `mutable` 키워드를 사용하여 수행됩니다.


```fsharp
let mutable e = 2.71
// e <- 3.14 // 오류 발생
printfn $"{e}!"
```

불변성은 F#의 데이터 구조에 영향을 미칩니다. 리스트, 튜플 및 레코드는 기본적으로 불변입니다. `@`연산은 `number`에 `[5; 6]`을 추가하여 concatNumber를 새롭게 생성합니다. 기존의 number 리스트는 변경되지 않고 유지되므로 불변성의 원리가 작동하는 것을 알 수 있습니다. 예를 들어, 변하지 않는 변수는 확정적인 값을 제공합니다. 불변성은 기존 값을 수정하지 않고 새로운 값을 반환하는 함수형 프로그래밍 원칙입니다.

```fsharp
let number = [1; 2; 3; 4]
let concatNumber = number @ [5; 6]
```

불변성은 메모리 혹은 연산의 오버헤드를 발생하는 것처럼 보입니다. 하지만, 이러한 방식은 더 효율적이고 예측 가능한 코드를 제공합니다. 불변 데이터 구조는 본질적으로 스레드에 안전하므로 동시 수정에 대한 걱정 없이 여러 스레드에서 공유할 수 있습니다. 또한 F#을 비롯한 많은 함수형 프로그래밍 언어에서는 구조 공유(structural sharing) 및 영구 데이터 구조(persistent data structures)와 같은 고급 최적화를 활용하여 불변 데이터를 효율적으로 관리합니다. F#은 패턴 매칭, 고차 함수 및 함수 합성과 같은 불변성에 기반한 함수형 기법을 활용하고, 해야 합니다. 불변성은 데이터 구조가 사용 내내 일관성을 유지하도록 함으로써 이러한 기술을 단순화합니다. 함수형 언어에서 불변성은 옵션이 아니라 필수라 할 수 있습니다.

```fsharp
let ogList = [1; 2; 3]
let edList = 0 :: ogList
```

### Scoping

F#에서 변수는 값에 바인딩(biding)되며, 그 범위(scope)는 변수가 정의된 위치에 따라 결정됩니다. 변수의 범위는 변수가 선언된 코드 블록에 국한됩니다.

```fsharp
let outerName = "I am Jone Doe"

let printName() =
    let innerName = "I am Jane Doe"
    printfn $"{outerName}"
    printfn $"{innerName}"

printName()
```

변수 가려짐(variable shadowing)은 새 변수가 기존 변수와 같은 이름으로 정의되어 특정 범위 내에서 이전 변수를 숨길 때 발생합니다. 예를 들어 아래 예제에서 함수 내부에 정의된 `x`는 외부 `x`를 가립니다. 그 결과 내부 `x`는 10의 값을 가지지만 외부 `x`는 5로 유지됩니다. 변수의 가림 효과는 변수 범위를 제한하고 의도하지 않은 부작용을 방지하는 데 유용한 기법이지만 코드 명확성을 유지하기 위해 신중하게 사용해야 합니다.

```fsharp
let x = 5
let showX() =
    let x = 10
    printfn $"Inner x: {x}"

printfn $"Outer x: {x}"
showX()
```

모든 언어는 변수와 변수의 영역에 관한 규칙을 올바르게 이해하고 있어야 합니다. F# 또한 예외가 아닙니다. 변수의 영역 규칙은 코드 내에서 데이터가 전달되고 수정되는 방식에 영향을 줍니다. 변수의 영역 규칙을 명확하고 유지 관리가 쉽도록 작성해야 합니다.
